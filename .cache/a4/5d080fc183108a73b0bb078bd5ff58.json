{"id":"../node_modules/@aws-sdk/eventstream-marshaller/build/splitMessage.js","dependencies":[{"name":"/Users/leemarshall/Documents/seedeck/web/node_modules/@aws-sdk/eventstream-marshaller/build/splitMessage.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/leemarshall/Documents/seedeck/web/package.json","includedInParent":true,"mtime":1575302379989},{"name":"/Users/leemarshall/Documents/seedeck/web/node_modules/@aws-sdk/eventstream-marshaller/package.json","includedInParent":true,"mtime":1575302379379},{"name":"@aws-crypto/crc32","loc":{"line":3,"column":22},"parent":"/Users/leemarshall/Documents/seedeck/web/node_modules/@aws-sdk/eventstream-marshaller/build/splitMessage.js","resolved":"/Users/leemarshall/Documents/seedeck/web/node_modules/@aws-crypto/crc32/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar crc32_1 = require(\"@aws-crypto/crc32\");\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\nfunction splitMessage(_a) {\n    var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error('Provided message too short to accommodate event stream message overhead');\n    }\n    var view = new DataView(buffer, byteOffset, byteLength);\n    var messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error('Reported message length does not match received message length');\n    }\n    var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    var checksummer = (new crc32_1.Crc32).update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n    };\n}\nexports.splitMessage = splitMessage;\n"},"sourceMaps":{"js":{"version":3,"file":"splitMessage.js","sourceRoot":"","sources":["../src/splitMessage.ts"],"names":[],"mappings":";;AAAA,2CAA0C;AAE1C,uDAAuD;AACvD,IAAM,qBAAqB,GAAG,CAAC,CAAC;AAChC,yCAAyC;AACzC,IAAM,cAAc,GAAG,qBAAqB,GAAG,CAAC,CAAC;AACjD,qCAAqC;AACrC,IAAM,eAAe,GAAG,CAAC,CAAC;AAC1B,mFAAmF;AACnF,IAAM,sBAAsB,GAAG,cAAc,GAAG,eAAe,GAAG,CAAC,CAAC;AAUpE;;GAEG;AACH,SAAgB,YAAY,CACxB,EAAmD;QAAjD,0BAAU,EAAE,0BAAU,EAAE,kBAAM;IAEhC,IAAI,UAAU,GAAG,sBAAsB,EAAE;QACrC,MAAM,IAAI,KAAK,CACX,yEAAyE,CAC5E,CAAC;KACL;IAED,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAE1D,IAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAE/C,IAAI,UAAU,KAAK,aAAa,EAAE;QAC9B,MAAM,IAAI,KAAK,CACX,gEAAgE,CACnE,CAAC;KACL;IAED,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;IAClE,IAAM,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IACtE,IAAM,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAC1C,UAAU,GAAG,eAAe,EAC5B,KAAK,CACR,CAAC;IAEF,IAAM,WAAW,GAAG,CAAC,IAAI,aAAK,CAAC,CAAC,MAAM,CAClC,IAAI,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,cAAc,CAAC,CACrD,CAAC;IACF,IACI,uBAAuB,KAAK,WAAW,CAAC,MAAM,EAAE,EAClD;QACE,MAAM,IAAI,KAAK,CACX,oDACI,uBAAuB,wDAEvB,WAAW,CAAC,MAAM,EAAE,MACrB,CACN,CAAC;KACL;IAED,WAAW,CAAC,MAAM,CAAC,IAAI,UAAU,CAC7B,MAAM,EACN,UAAU,GAAG,cAAc,EAC3B,UAAU,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,CAClD,CAAC,CAAC;IACH,IAAI,uBAAuB,KAAK,WAAW,CAAC,MAAM,EAAE,EAAE;QAClD,MAAM,IAAI,KAAK,CACX,2BACI,WAAW,CAAC,MAAM,EAAE,8CACiB,uBAAyB,CACrE,CAAA;KACJ;IAED,OAAO;QACH,OAAO,EAAE,IAAI,QAAQ,CACjB,MAAM,EACN,UAAU,GAAG,cAAc,GAAG,eAAe,EAC7C,YAAY,CACf;QACD,IAAI,EAAE,IAAI,UAAU,CAChB,MAAM,EACN,UAAU,GAAG,cAAc,GAAG,eAAe,GAAG,YAAY,EAC5D,aAAa,GAAG,YAAY,GAAG,CAC3B,cAAc,GAAG,eAAe,GAAG,eAAe,CACrD,CACJ;KACJ,CAAC;AACN,CAAC;AApED,oCAoEC","sourcesContent":[null]}},"error":null,"hash":"7f8dda5a0d2ba0b2535a0b6305037c09","cacheData":{"env":{}}}